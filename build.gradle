plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	runs {
		datagen {
			server()
			name = "Data Generation"
			runDir = "build/datagen"
			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
		}
	}
}

assemble.dependsOn(runDatagen)

sourceSets {
	main {
		resources {
			srcDirs += [
					"src/main/generated"
			]
		}
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	//maven { url 'https://maven.nucleoid.xyz' }
	maven { url 'https://maven.nucleoid.xyz' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url "https://lazurite.dev/releases" }
	maven { url "https://api.modrinth.com/maven" }
	mavenLocal()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation include('xyz.nucleoid:server-translations-api:2.0.0-beta.2+1.19.4-pre2')
	modImplementation include('eu.pb4:polymer-core:0.4.7+1.19.4')
	//modImplementation include('eu.pb4:polymer-resource-pack:0.4.0+1.19.4')
	modImplementation include('eu.pb4:polymer-virtual-entity:0.4.7+1.19.4')
	//modLocalRuntime 'eu.pb4:polymer-autohost:0.4.0+1.19.4'
	//modImplementation include("eu.pb4:sgui:1.2.1+1.19.3")
	//modImplementation include("eu.pb4:placeholder-api:2.0.0-rc.1+1.19.3")
	modImplementation include("eu.pb4:common-protection-api:1.0.0")
	modImplementation include("me.lucko:fabric-permissions-api:0.2-SNAPSHOT")
	modImplementation 'dev.lazurite:rayon-fabric:1.7.0+1.19.4'

	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}



processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	from("src/main/resources/data/physics_toys/lang") {
		into("assets/physics_toys/lang")
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

if (System.getenv("MODRINTH")) {
	modrinth {
		token = System.getenv("MODRINTH")
		projectId = ''// The ID of your modrinth project, slugs will not work.
		versionNumber = "" + version // The version of the mod to upload.
		versionType = "release"
		uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
		gameVersions = [((String) project.minecraft_version)]
		changelog = System.getenv("CHANGELOG")
		loaders = ["fabric", "quilt"]
		dependencies { // A special DSL for creating dependencies
			// scope.type
			// The scope can be `required`, `optional`, `incompatible`, or `embedded`
			// The type can either be `project` or `version`
			required.project "rayon"
		}
	}

	remapJar {
		finalizedBy project.tasks.modrinth
	}
}
